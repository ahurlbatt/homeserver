- name: Server setup
  hosts: myservers
  collections:
    - devsec.hardening
  become: true
  roles:
    - role: devsec.hardening.os_hardening
      vars:
        sysctl_overwrite:
          # Enable IP forwarding, required for docker
          net.ipv4.ip_forward: 1
        os_user_pw_ageing: false
        os_rootuser_pw_ageing: false
        os_auth_pam_passwdqc_enable: false
  vars_files:
    - user_variables.yaml
    - ../github_deploy_key_public.vault
    - ../github_deploy_key_private.vault
  vars:
    secrets_dir: "{{ playbook_dir }}/../secrets"
    borgbackup_dir: "{{ playbook_dir }}/../borgbackup"
    sanoid_dir: "{{ playbook_dir }}/../sanoid"
    zpool_creation_options: "-o {{ zpool_options | map('quote') | join(' -o ') }} {{ zpool_name | quote }} {{ zpool_raid_type | quote }}"
    dataset_nextcloud_parent_full_name: "{{ zpool_name + '/' + dataset_nextcloud_parent_name }}"
    zfs_create_options_dataset_nextcloud_parent: "{{ dataset_nextcloud_parent_options | map('quote') | map('regex_replace', '^', '-o ') | join(' ') }} {{ dataset_nextcloud_parent_full_name | quote }}"
    dataset_nextcloud_full_name: "{{ dataset_nextcloud_parent_full_name + '/' + dataset_nextcloud_name }}"
    zfs_create_options_dataset_nextcloud: "{{ dataset_nextcloud_options | map('quote') | map('regex_replace', '^', '-o ') | join(' ') }} {{ dataset_nextcloud_full_name | quote }}"
    dataset_db_full_name: "{{ dataset_nextcloud_parent_full_name + '/' + dataset_db_name }}"
    zfs_create_options_dataset_db: "{{ dataset_db_options | map('quote') | map('regex_replace', '^', '-o ') | join(' ') }} {{ dataset_db_full_name | quote }}"
    all_zfs_objects:
      - "{{ zpool_name }}"
      - "{{ dataset_nextcloud_parent_full_name }}"
      - "{{ dataset_nextcloud_full_name }}"
      - "{{ dataset_db_full_name }}"
  tasks:
    - name: Allow memory over commit
      ansible.posix.sysctl:
        name: vm.overcommit_memory
        value: "1"
    - name: Install required things
      block:
        - name: Add contrib and backports repositories
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
          loop:
            - "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib"
            - "deb-src http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib"
        - name: Install Linux Headers and update cache
          ansible.builtin.apt:
            name:
              - linux-headers-amd64
            update_cache: true
        - name: Install zfs, some GPG stuff for docker, and requirements for sanoid
          ansible.builtin.apt:
            update_cache: false
            name:
              - zfsutils-linux
              - zfs-dkms
              - ca-certificates
              - curl
              - gnupg
              - debhelper
              - libcapture-tiny-perl
              - libconfig-inifiles-perl
              - pv
              - lzop
              - mbuffer
              - build-essential
              - python3
              - python3-pip
        - name: Install docker
          block:
            - name: Add docker repo with their sketchy custom script
              block:
                - name: Make sure the key directory exists, as GPG can't create it
                  ansible.builtin.file:
                    path: /etc/apt/keyrings
                    state: directory
                - name: Get the docker GPG key
                  ansible.builtin.shell:
                  args:
                    cmd: curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
                    creates: /etc/apt/keyrings/docker.gpg
                - name: Ensure GPG key permissions are correct
                  ansible.builtin.file:
                    path: /etc/apt/keyrings/docker.gpg
                    mode: a+r
                    state: file
                - name: Add the docker repo
                  ansible.builtin.apt_repository:
                    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
                    state: present
                    update_cache: true
            - name: Install docker
              ansible.builtin.apt:
                update_cache: true
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                  - docker-buildx-plugin
                  - docker-compose-plugin
    - name: Create/Import zpool and datasets
      block:
        - name: Check existence of zpool
          ansible.builtin.command: zpool list -H -o name
          register: existing_zpools
          changed_when: false
        - name: Unknown zpools found
          ansible.builtin.fail:
            msg: "Existing zpool(s) found with name(s): {{ existing_zpools.stdout_lines | join(', ') }}"
          when: existing_zpools.stdout != "" and zpool_name not in existing_zpools.stdout_lines
        - name: Import or create zpool
          block:
            - name: Import zpool
              ansible.builtin.command: zpool import {{ zpool_name }}
              register: zpool_import_results
              changed_when: false
              ignore_errors: true
            - name: Force import if it failed, and user confirms
              block:
                - name: Ask user if they want to force import
                  ansible.builtin.pause:
                    prompt: "Zpool {{ zpool_name }} already exists, but may be from a different system:\n  - {{ zpool_import_results.stderr_lines.1 }}\nDo you want to force import it? (y/n)"
                  register: force_zpool_import
                  delegate_to: localhost
                - name: Fail if user doesn't want to force import
                  ansible.builtin.fail:
                    msg: "Aborting zpool import."
                  delegate_to: localhost
                  when: force_zpool_import.user_input != "y"
                - name: Force import zpool
                  ansible.builtin.command: zpool import -f {{ zpool_name }}
                  register: forced_zpool_import_results
                  changed_when: false
                  when: force_zpool_import.user_input == "y"
                - name: Replace zpool_import_results with forced_zpool_import_results
                  set_fact:
                    zpool_import_results: "{{ forced_zpool_import_results }}"
                  when: force_zpool_import.user_input == "y"
              when: zpool_import_results.rc != 0 and zpool_import_results.stderr_lines.0 is search("pool was previously in use from another system")
            - name: Create zpool as it is not importable
              block:
                - name: Get the boot drive
                  ansible.builtin.shell: df /boot | tail -1 | awk '{print $1}' | sed 's/[0-9]*$//'
                  register: boot_drive
                  changed_when: false
                - name: Get a list of drives that are not the boot drive
                  # '-I 8' restricts to only disks, not partitions
                  ansible.builtin.shell: lsblk -dpn -I 8 -o NAME -l | sed "\&{{ boot_drive.stdout | quote }}&d"
                  register: zpool_drives
                  changed_when: false
                - name: Create zpool
                  ansible.builtin.command: zpool create {{ zpool_creation_options }} {{ zpool_drives.stdout_lines | map('quote') | join(' ') }}
                  register: zpool_create_results
                  ignore_errors: true
                - name: If zpool fails, try force creation after user confirmation
                  block:
                    - name: Ask user if they want to force creation
                      ansible.builtin.pause:
                        prompt: "Zpool creation failed for the following reason:\n  - {{ zpool_create_results.stderr_lines.2 }}\nDo you want to force create it? (y/n)"
                      register: force_zpool_create
                      delegate_to: localhost
                    - name: Fail if user doesn't want to force create
                      ansible.builtin.fail:
                        msg: "Aborting zpool creation."
                      delegate_to: localhost
                      when: force_zpool_create.user_input != "y"
                    - name: Force create zpool
                      ansible.builtin.command: zpool create -f {{ zpool_creation_options }} {{ zpool_drives.stdout_lines | map('quote') | join(' ') }}
                      register: forced_zpool_create_results
                      when: force_zpool_create.user_input == "y"
                    - name: Replace zpool_create_results with forced_zpool_create_results
                      set_fact:
                        zpool_create_results: "{{ forced_zpool_create_results }}"
                      when: force_zpool_create.user_input == "y"
                  when: zpool_create_results.rc != 0 and zpool_create_results.stderr is search("use '-f' to override the following errors")
              when: zpool_import_results.rc != 0
          when: zpool_name not in existing_zpools.stdout_lines
        - name: Get zfs to mount everything it knows about
          ansible.builtin.shell: zfs mount -a
          changed_when: false
          ignore_errors: true
        - name: Check existence of dataset
          ansible.builtin.command: zfs list -H -o name
          register: existing_zfs_objects
          changed_when: false
        - name: Unknown dataset found
          ansible.builtin.fail:
            msg: "Existing dataset(s) found with name(s): {{ existing_zfs_objects.stdout_lines | join(', ') }}. Expected: {{ all_zfs_objects | join(', ') }}."
          when: existing_zfs_objects.stdout != "" and existing_zfs_objects.stdout_lines | difference(all_zfs_objects) | length > 0
        - name: Create parent dataset for nextcloud
          ansible.builtin.command: zfs create {{ zfs_create_options_dataset_nextcloud_parent }}
          args:
            creates: "/{{ dataset_nextcloud_parent_full_name }}"
        - name: Create dataset for nextcloud
          ansible.builtin.command: zfs create {{ zfs_create_options_dataset_nextcloud }}
          args:
            creates: "/{{ dataset_nextcloud_full_name }}"
        - name: Create dataset for db
          ansible.builtin.command: zfs create {{ zfs_create_options_dataset_db }}
          args:
            creates: "/{{ dataset_db_full_name }}"
    - name: Copy key files and checkout/decrypt repo
      block:
        - name: Copy over deploy private key
          ansible.builtin.copy:
            content: "{{ github_deploy_key_private }}"
            dest: ~/.ssh/id_rsa
            mode: 0600
        - name: Copy over deploy public key
          ansible.builtin.copy:
            content: "{{ github_deploy_key_public }}"
            dest: ~/.ssh/id_rsa.pub
            mode: 0644
        - name: Checkout repo
          ansible.builtin.git:
            repo: "{{ github_repo }}"
            dest: "{{ github_repo_destination }}"
            accept_newhostkey: true
            key_file: ~/.ssh/id_rsa
            force: true
        - name: Copy over secrets
          ansible.builtin.copy:
            src: "{{ secrets_dir + '/' + item + '.vault' }}"
            dest: "{{ github_repo_destination + '/secrets/' + item }}"
            mode: 0600
          loop: "{{ lookup('file', '{{ secrets_dir }}/secrets.txt').splitlines() }}"
        - name: Copy the domain secret to nextcloud .env file, so it's available to docker compose
          ansible.builtin.shell: echo -n "MY_DOMAIN=$(cat secrets/mydomain.secret)" > .env
          args:
            chdir: "{{ github_repo_destination + '/nextcloud' }}"
            creates: "{{ github_repo_destination + '/nextcloud/.env' }}"
        - name: Get the absolute path of the repo
          ansible.builtin.shell: pwd
          register: github_repo_destination_absolute
          changed_when: false
          args:
            chdir: "{{ github_repo_destination }}"
      become: false
    - name: Install and configure sanoid
      block:
        - name: Checkout sanoid repo
          ansible.builtin.git:
            repo: "https://github.com/jimsalterjrs/sanoid.git"
            dest: "~/sanoid/sanoid"
            version: "v2.1.0"
        - name: Link debian folder
          ansible.builtin.file:
            src: "~/sanoid/sanoid/packages/debian"
            dest: "~/sanoid/sanoid/debian"
            state: link
        - name: Build sanoid package
          ansible.builtin.command: dpkg-buildpackage -us -uc -b
          args:
            chdir: "~/sanoid/sanoid"
            creates: "~/sanoid/sanoid_2.1.0_all.deb"
        - name: Install sanoid package
          ansible.builtin.apt:
            deb: "~/sanoid/sanoid_2.1.0_all.deb"
        - name: Copy sanoid config
          ansible.builtin.copy:
            src: "{{ sanoid_dir }}/sanoid.conf"
            dest: /etc/sanoid/sanoid.conf
            owner: root
            group: root
            mode: 0644
        - name: Enable sanoid timer
          ansible.builtin.systemd:
            name: sanoid.timer
            enabled: true
            state: started
    - name: Install and configure borg and borgmatic
      block:
        - name: Grab borgbackup
          ansible.builtin.get_url:
            url: https://github.com/borgbackup/borg/releases/download/1.2.4/borg-linux64
            dest: /usr/local/bin/borg
            mode: 0755
            group: root
            owner: root
        - name: Install borgmatic
          ansible.builtin.pip:
            name: borgmatic
            state: present
        - name: Copy borgmatic config
          ansible.builtin.copy:
            src: "{{ borgbackup_dir }}/borgmatic_config.yaml"
            dest: /etc/borgmatic/config.yaml
            owner: root
            group: root
            mode: 0644
        - name: Copy snapshot mounting script
          ansible.builtin.copy:
            src: "{{ borgbackup_dir }}/mount-latest-snapshots.sh"
            dest: /usr/local/bin/mount-latest-snapshots.sh
            owner: root
            group: root
            mode: 0744
        - name: Copy systemd unit file for borgmatic
          ansible.builtin.copy:
            src: "{{ borgbackup_dir }}/borgmatic.service"
            dest: /etc/systemd/system/borgmatic.service
            owner: root
            group: root
            mode: 0644
        - name: Copy systemd unit file for borgmatic timer
          ansible.builtin.copy:
            src: "{{ borgbackup_dir }}/borgmatic.timer"
            dest: /etc/systemd/system/borgmatic.timer
            owner: root
            group: root
            mode: 0644
        - name: Enable borgmatic timer
          ansible.builtin.systemd:
            name: borgmatic.timer
            enabled: true
            state: started
    - name: Start internal containers
      ansible.builtin.shell: docker compose up -d
      args:
        chdir: "{{ github_repo_destination_absolute.stdout }}/nextcloud"
    - name: Secure mysql container
      block:
        - name: Remove anonymous users
          ansible.builtin.command: "docker exec nextcloud-db bash -c 'mariadb -u root -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -e \"DELETE FROM mysql.global_priv WHERE User=\\\"\\\";\"'"
          changed_when: false
          args:
            chdir: "{{ github_repo_destination_absolute.stdout }}"
        - name: Prevent root login remotely
          ansible.builtin.command: "docker exec nextcloud-db bash -c 'mariadb -u root -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -e \"DELETE FROM mysql.global_priv WHERE User=\\\"root\\\" AND Host NOT IN (\\\"localhost\\\", \\\"127.0.0.1\\\", \\\"::1\\\");\"'"
          changed_when: false
          args:
            chdir: "{{ github_repo_destination_absolute.stdout }}"
        - name: Remove test database
          ansible.builtin.command: "docker exec nextcloud-db bash -c 'mariadb -u root -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -e \"DROP DATABASE IF EXISTS test;\"'"
          changed_when: false
          args:
            chdir: "{{ github_repo_destination_absolute.stdout }}"
        - name: Reload privileged tables
          ansible.builtin.command: "docker exec nextcloud-db bash -c 'mariadb -u root -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -e \"FLUSH PRIVILEGES;\"'"
          changed_when: false
          args:
            chdir: "{{ github_repo_destination_absolute.stdout }}"
    - name: Start caddy container
      ansible.builtin.shell: docker compose up -d
      args:
        chdir: "{{ github_repo_destination_absolute.stdout }}/caddy"