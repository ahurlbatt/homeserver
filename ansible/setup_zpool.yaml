- name: Check existence of zpool
  ansible.builtin.command: zpool list -H -o name
  register: existing_zpools
  changed_when: false
  check_mode: true

- name: Unknown zpools found
  ansible.builtin.fail:
    msg: "Existing zpool(s) found with name(s): {{ existing_zpools.stdout_lines | join(', ') }}"
  when: existing_zpools.stdout != "" and zpool_name not in existing_zpools.stdout_lines

- name: Import or create zpool
  block:
    - name: Import zpool
      ansible.builtin.command: zpool import {{ zpool_name }}
      register: zpool_import_results
      changed_when: false
      ignore_errors: true
    - name: Force import if it failed, and user confirms
      include_tasks: force_import_zpool.yaml
      when: zpool_import_results.rc != 0 and zpool_import_results.stderr_lines.0 is search("pool was previously in use from another system")
    - name: Create zpool as it is not importable
      include_tasks: create_zpool.yaml
      when: zpool_import_results.rc != 0
  when: zpool_name not in existing_zpools.stdout_lines

- name: Get zfs to mount everything it knows about
  ansible.builtin.shell: zfs mount -a
  changed_when: false
  ignore_errors: true

- name: Check existence of dataset
  ansible.builtin.command: zfs list -H -o name
  register: existing_zfs_objects
  changed_when: false

- name: Unknown dataset found
  ansible.builtin.fail:
    msg: "Existing dataset(s) found with name(s): {{ existing_zfs_objects.stdout_lines | join(', ') }}. Expected: {{ all_zfs_objects | join(', ') }}."
  when: existing_zfs_objects.stdout != "" and existing_zfs_objects.stdout_lines | difference(all_zfs_objects) | length > 0

- name: Create parent dataset for nextcloud
  ansible.builtin.command: zfs create {{ zfs_create_options_dataset_nextcloud_parent }}
  args:
    creates: "/{{ dataset_nextcloud_parent_full_name }}"

- name: Create dataset for nextcloud
  ansible.builtin.command: zfs create {{ zfs_create_options_dataset_nextcloud }}
  args:
    creates: "/{{ dataset_nextcloud_full_name }}"

- name: Create dataset for db
  ansible.builtin.command: zfs create {{ zfs_create_options_dataset_db }}
  args:
    creates: "/{{ dataset_db_full_name }}"