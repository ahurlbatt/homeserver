- name: Server setup
  hosts: myservers
  collections:
    - devsec.hardening
  become: true
  roles:
    - role: devsec.hardening.os_hardening
      vars:
        sysctl_overwrite:
          # Enable IP forwarding, required for docker
          net.ipv4.ip_forward: 1
  vars_files:
    - user_variables.yaml
    - github_deploy_key_public.vault
    - github_deploy_key_private.vault
  vars:
    all_zfs_objects:
      - "{{ zpool_name }}"
      - "{{ zpool_name + '/' + dataset_nextcloud_name }}"
      - "{{ zpool_name + '/' + dataset_db_name }}"
  tasks:
    - name: Allow memory over commit
      ansible.posix.sysctl:
        name: vm.overcommit_memory
        value: "1"
    - name: Install required things
      block:
        - name: Add contrib and backports repositories
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
          loop:
            - "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib"
            - "deb-src http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main contrib"
        - name: Install Linux Headers and update cache
          ansible.builtin.apt:
            name:
              - linux-headers-amd64
            update_cache: true
        - name: Install zfs and docker
          ansible.builtin.apt:
            update_cache: false
            name:
              - zfsutils-linux
              - zfs-dkms
        - name: Install docker
          block:
            - name: Install certificate stuff
              ansible.builtin.apt:
                  name:
                  - ca-certificates
                  - curl
                  - gnupg
            - name: Add docker repo with their sketchy custom script
              block:
                - name: Get the docker GPG key
                  ansible.builtin.shell:
                  args:
                    cmd: curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
                    creates: /etc/apt/keyrings/docker.gpg
                - name: Ensure GPG key permissions are correct
                  ansible.builtin.file:
                    path: /etc/apt/keyrings/docker.gpg
                    mode: a+r
                    state: file
                - name: Add the docker repo
                  ansible.builtin.apt_repository:
                    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
                    state: present
                    update_cache: true
            - name: Install docker
              ansible.builtin.apt:
                update_cache: true
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                  - docker-buildx-plugin
                  - docker-compose-plugin
    - name: Create/Import zpool and datasets
      block:
      - name: Check existence of zpool
        ansible.builtin.command: zpool list -H -o name
        register: existing_zpools
        changed_when: false
      - name: Unknown zpool found
        ansible.builtin.fail:
          msg: "Existing zpool(s) found with name(s): {{ existing_zpools.stdout_lines | join(', ') }}"
        when: existing_zpools.stdout != "" and existing_zpools.stdout != zpool_name
      - name: Import or create zpool
        block:
        - name: Import zpool
          ansible.builtin.command: zpool import {{ zpool_name }}
          register: zpool_import_results
          changed_when: false
          ignore_errors: true
  #        TODO: Handle zpools that come from other servers by asking for confirmation
        - name: Create zpool
          block:
            - name: Get the boot drive
              ansible.builtin.shell: df /boot | tail -1 | awk '{print $1}' | sed 's/[0-9]*$//'
              register: boot_drive
              changed_when: false
            - name: Get a list of drives that are not the boot drive
              ansible.builtin.shell: lsblk -dpn -I 8 -o NAME -l | sed "\&{{ boot_drive.stdout | quote }}&d"
              register: zpool_drives
              changed_when: false
            - name: Create zpool
              ansible.builtin.command: zpool create -o {{ zpool_options | map('quote') | join(' -o ') }} {{ zpool_name | quote }} {{ zpool_raid_type | quote }} {{ zpool_drives.stdout_lines | map('quote') | join(' ') }}
          when: zpool_import_results.rc != 0
        when: existing_zpools.stdout != zpool_name
      - name : Get zfs to mount everything it knows about
        ansible.builtin.shell: zfs mount -a
        changed_when: false
        ignore_errors: true
      - name: Check existence of dataset
        ansible.builtin.command: zfs list -H -o name
        register: existing_zfs_objects
        changed_when: false
      - name: Unknown dataset found
        ansible.builtin.fail:
            msg: "Existing dataset(s) found with name(s): {{ existing_zfs_objects.stdout_lines | join(', ') }}. Expected: {{ all_zfs_objects | join(', ') }}."
        when: existing_zfs_objects.stdout != "" and existing_zfs_objects.stdout_lines | difference(all_zfs_objects) | length > 0
      - name: Create dataset for nextcloud
        ansible.builtin.command: zfs create -o {{ dataset_nextcloud_options | map('quote') | join(' -o ') }} {{ zpool_name | quote }}/{{ dataset_nextcloud_name | quote }}
        args:
          creates: "{{ '/' + zpool_name + '/' + dataset_nextcloud_name }}"
      - name: Create dataset for db
        ansible.builtin.command: zfs create -o {{ dataset_db_options | map('quote') | join(' -o ') }} {{ zpool_name | quote }}/{{ dataset_db_name | quote }}
        args:
          creates: "{{ '/' + zpool_name + '/' + dataset_db_name }}"
    - name: Copy key files and checkout/decrypt repo
      block:
        - name: Copy over deploy private key
          ansible.builtin.copy:
            content: "{{ github_deploy_key_private }}"
            dest: ~/.ssh/id_rsa
            mode: 0600
        - name: Copy over deploy public key
          ansible.builtin.copy:
            content: "{{ github_deploy_key_public }}"
            dest: ~/.ssh/id_rsa.pub
            mode: 0644
        - name: Checkout repo
          ansible.builtin.git:
            repo: "{{ github_repo }}"
            dest: "{{ github_repo_destination }}"
            accept_newhostkey: true
            key_file: ~/.ssh/id_rsa
            force: true
        - name: Copy over secrets
          ansible.builtin.copy:
              src: "{{ playbook_dir + '/' + item + '.vault' }}"
              dest: "{{ github_repo_destination + '/' + item }}"
              mode: 0600
          loop: "{{ lookup('file', 'secrets/secrets.txt').splitlines() }}"
        - name: Copy the domain secret to the .env file, so it's available to docker compose
          ansible.builtin.shell: echo -n "MY_DOMAIN=$(cat secrets/mydomain.secret)" > .env
          args:
            chdir: "{{ github_repo_destination }}"
            creates: "{{ github_repo_destination + '/.env' }}"
        - name: Get the absolute path of the repo
          ansible.builtin.shell: pwd
          register: github_repo_destination_absolute
          changed_when: false
          args:
            chdir: "{{ github_repo_destination }}"
      become: false
#    - name: Start and configure containers
#      block:
#        - name: Fetch container images
#          ansible.builtin.shell: docker compose pull
#          args:
#            chdir: "{{ github_repo_destination_absolute.stdout }}"
#        - name: Start containers
#          ansible.builtin.shell: docker compose up -d
#          args:
#            chdir: "{{ github_repo_destination_absolute.stdout }}"